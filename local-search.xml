<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VPS 初体验（五）将 Hexo 静态博客一键部署到 VPS</title>
    <link href="/2021/10/18/Hexo%20%E9%83%A8%E7%BD%B2%E5%88%B0%20VPS/"/>
    <url>/2021/10/18/Hexo%20%E9%83%A8%E7%BD%B2%E5%88%B0%20VPS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用 Hexo 配合免费的 Github 的仓库和 Github Pages 可以快速在互联网上<a href="">搭建自己的个人博客</a>。但是因为 GitHub Pages 在国内的访问速度太差，为了得到更好的访问体验，可以选择将博客部署到自己的 VPS 上。最直接的方法就是手动将生成的博客静态文件手动使用 FTP 上传到 Nginx 上的博客站点目录下，但是这样每次更新都要手动 FTP 上传显得麻烦且不优雅。</p><p>而 Hexo 本身提供了快速方便的<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">一键部署功能</a>，支持包括 Git、Netlify、SFTP 等多种部署方式。虑到稳定性和同步速度，最终选择了使用 Git 方式部署到 VPS。</p><p>首先需要在 VPS 上准备一个 Git 裸仓库作为 Hexo 的部署仓库。当运行 <code>hexo deploy</code> 命令时，会自动使用 <code>git push</code> 将博客的静态文件上传到 VPS 的 Git 仓库中。</p><p><strong>注意：裸仓一般都是用来当做远程的中心公共仓库，专门用来存储和同步分发，裸仓库可以被正常 <code>clone</code> 和 <code>push</code> ，但是裸仓没有 worktree 的，不能像普通仓库那样进行 <code>commit</code> 等 Git 操作。</strong></p><p>光把博客静态文件上传到仓库还不够，还需要拷贝到 Nginx 的博客站点目录一下才能被 HTTP(S) 访问。为此需要使用到 <a href="https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks</a> 功能，当服务器端的 Git 裸仓收到 git push 之后，会自动触发 Git Hooks 中的 <code>post-receive</code> 脚本，该脚本将 Git 裸仓中的文件拷贝到 Nginx 的博客站点目录下。这样就可以真正达到了 <code>hexo deploy</code> 命令全程自动部署的效果。</p><p>![<a href="http://www.liuxinggang.com/archives/gethook_hexo_vps.html">使用Git Hook自动部署Hexo到个人VPS</a>](Hexo 部署到 VPS images/2755175395.png)</p><ol><li><p>  在宝塔面板已经创建好 kiku.vip 站点作为博客入口，站点的根目录为 <code>/www/wwwroot/kiku.vip</code>。</p></li><li><p>在 VPS 上安装 git，部分 Linux 发行版自带 git，可以跳过安装了。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install git<br></code></pre></td></tr></table></figure></li><li><p>在当前用户目录初始化一个 git 裸仓。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init --bare ~/hexoblog.git<br></code></pre></td></tr></table></figure></li><li><p>为创建的裸仓配置 <code>post-receive</code>这个钩子，当仓库有收发的时候就会自动调用这个钩子。 在 <code>~/blog.git</code> 裸库的 <code>hooks</code>文件夹中，新建并编辑 <code>post-receive</code>文件。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/hexoblog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>  在文件中添加下面的脚本代码。如果为文件都修改了正确的权限下面出现的代码可以不加 <code>sudo</code>，为了图方便都和避免各种意想不到的权限错误，推荐直接加上 <code>sudo</code>。</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo rm -rf /www/wwwroot/kiku.vip<br>sudo git clone ~/hexoblog.git /www/wwwroot/kiku.vip<br></code></pre></td></tr></table></figure><p>  脚本的第 1 行是删除 <code>/www/wwwroot/kiku.vip</code> （即 <code>kiku.vip</code> 站点目录）下的文件，第 2 行将 <code>~/hexoblog.git</code>下的文件 <code>git clone</code> 到 <code>/www/wwwroot/kiku.vip</code> （即 <code>kiku.vip</code> 站点目录）。</p><p>  但更加推荐使用下面的脚本，效果和上面的两行脚本等效，但是比使用 <code>git clone</code> 的效率更高。<code>--work-tree</code> 参数后面是的是站点目录，<code>--git-dir</code> 参数指定的是 git 裸仓地址，注意要使用 <code>~/hexoblog.git</code> 因为用到了 sudo， <code>~</code> 会指向 root 用户目录，直接使用 <code>/home/Kiku/hexoblog.git</code>。</p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo git --work-tree=/www/wwwroot/kiku.vip --git-dir=/home/Kiku/hexoblog.git checkout -f<br></code></pre></td></tr></table></figure><p>  整个的第 4 步可以用下面一行代码代替，省去了 vim 打开编辑的麻烦。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo sudo git --work-tree=/www/wwwroot/kiku.vip --git-dir=/home/Kiku/hexoblog.git checkout -f &gt; ~/hexoblog.git/hooks/post-receive<br></code></pre></td></tr></table></figure></li><li><p>赋予 <code>post-receive</code> 脚本文件可执行权限</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x ~/hexoblog.git/hooks/post-receive<br></code></pre></td></tr></table></figure></li><li><p>修改本地 Hexo 配置文件 <code>_config.yml</code> 中的 deploy 选项。<br>  <strong>注意如果 VPS 上的 SSH 的连接端口不是默认的 22 需要手动指定端口。</strong> </p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">Kiku@kiku.vip:/home/Kiku/hexoblog.git</span><br></code></pre></td></tr></table></figure><p>  如果想同时部署到 GitHub 和 VPS 上的 git 裸仓 deploy 应该如下：</p><p>  <strong>注意有多个部署选项时 <code>type</code> 时前面要添加 <code>-</code>。</strong></p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:Kiku-CN/Kiku-CN.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">Kiku@kiku.vip:/home/Kiku/hexoblog.git</span><br></code></pre></td></tr></table></figure></li><li><p>重新生成部署 Hexo 博客，查看是部署是否成功。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean  # 先删除曾静态文件和缓存，避免可能的 Bug<br>hexo g -d  # hexo generate deploy<br></code></pre></td></tr></table></figure></li></ol><p>前前后后花了接近半个月的时间在 VPS 上，才终于把服务器折腾成自己想要的效果。在这个过程中学到了不少网络和服务器相关的知识，见识了中文互联网环境背后的那一面，发现了不少优质的博客。将这段经历总结成 5 篇博客，VPS 折腾暂告一段，接下来全力准备找工作了。</p><ol><li></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>  <a href="http://www.liuxinggang.com/archives/gethook_hexo_vps.html">使用Git Hook自动部署Hexo到个人VPS</a></li><li>  <a href="https://moelove.info/2016/12/04/Git-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%92%8C%E8%A3%B8%E4%BB%93%E5%BA%93/">Git 本地仓库和裸仓库</a></li><li>  <a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">Hexo 一键部署</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH</tag>
      
      <tag>VPS</tag>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS 初体验（四）trojan 和 Nginx 共用 443 端口</title>
    <link href="/2021/10/17/trojan%20%E5%92%8C%20Nginx%20%E5%85%B1%E7%94%A8%20443%20%E7%AB%AF%E5%8F%A3/"/>
    <url>/2021/10/17/trojan%20%E5%92%8C%20Nginx%20%E5%85%B1%E7%94%A8%20443%20%E7%AB%AF%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于 trojan 默认工作在服务器的 443 端口，而 Nginx 的 HTTPS 服务端口也在 443，如果此时想同时使用两种服务。那么要么更改 trojan 默认端口，要么更改 Nginx 的 HTTPS 端口。如果选择更改 HTTPS 端口那么所有 URL 都要补充上端口号，既麻烦也不美观。那么更改 trojan 的默认监听端口可行吗？</p><p>trojan 的工作机制是客户端使用 TLS 对要代理的流量进行加密伪装成 HTTPS 流量发送给 trojan 服务端，trojan 服务端工作在 443 端口，对 TLS 加密的数据解密后进行流量识别，如果流量是 trojan 协议并且检查合法（检查 trojan 密码是否正确），说明来自正确的 trojan 客户端，对流量代理转发。如果流量不是 trojan 协议，说明不是来自 trojan 客户端的数据，则转发到则转发到服务端本地的 80 端口，而 80 端口则提前配置好一个 HTTP 伪装站点，向客户端响应 HTML 页面。</p><p>之前的代理协议例如 Shadowsocks、VMess，思路普遍都是使用各种复杂的加密，来避免流量特征被 GFW 识别，而 trojan 选择的是把 trojan 服务伪装成一个提供 HTTPS Web 服务的站点，流量在 GFW 看来和普通的 HTTPS 流量没什么区别，进而来躲避 GFW 的审查和封锁。 trojan 相比之前的协议传输效率更高（只有一层加密），抗封锁效果反而更好。</p><p>个人理解对 trojan 的伪装可以体现在下面几个方面</p><ol><li>  TCP 端口号和 HTTPS 一样工作在 443 端口。</li><li>  和普通 HTTPS 流量一样使用 TLS 协议进行加密。</li><li>  如果用户（可能是探针）使用 HTTPS 协议来访问 trojan server，用户看到的是预先准备好的伪装 Web 站点，和普通 Web 站点没有任何区别。</li></ol><p>因此 trojan 工作在 443 端口也是伪装的一部分，可以增加服务的隐蔽性，因此建议不要更改 trojan 的默认工作端口。</p><p><strong>注意：没有谁能确认 GFW 真正的工作机制，有的人改了 trojan 端口用的好好的，有的人没改还是被封，没有准确的统计数据来说明 trojan 使用 443 端口是否能真正减少封禁的几率。并且使用 trojan 协议在 443 端口也不代表永远不会被封禁，就可以高枕无忧、一劳永逸了。每种协议新出的时候大家都是充满了乐观，但是 GFW 的检测手段也在不断进化，有可能 GFW 已经检测出流量异常只不过没下手罢了。如果滥用节点，比如拿来开机场，或者发表一些敏感言论，被封禁的风险就会大大增加，甚至请你过去喝茶。此外特殊敏感时期的无差别封禁也有可能误伤到你的 VPS。</strong></p><p>那么有没有让 trojan 和 Nginx 公用 443 端口的办法呢？一番搜索之后得到了肯定的答案——利用 TLS 握手阶段的 SNI 信息将流量在 4 层进行转发。关于 SNI 转发的工作原理请看程小白的这篇文章 <a href="https://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme">Trojan 共用 443 端口方案</a>。</p><p>前置环境：已经使用 <a href="https://github.com/Jrohy/trojan">Jrohy 的一键脚本</a> 安装了 trojan 和 trojan web 管理程序，trojan 所使用的域名为 <code>free.kiku.vip</code>， 访问 <a href="https://free.kiku.vip/">https://free.kiku.vip</a> 看到的 trojan web 管理面板。搭建可以看</p><p>![image-20211017193404608](trojan 和 Nginx 共用 443 端口 images/image-20211017193404608.png)</p><p>想要达到的目标：<code>free.kiku.vip</code> 还是用用来使用 trojan 代理服务，直接访问 <a href="https://free.kiku.vip/">https://free.kiku.vip</a> 看到的是伪装站点，访问 <a href="https://free.kiku.vip/admin">https://free.kiku.vip/admin</a> 才是 trojan web 管理面板。除了 <code>free.kiku.vip</code> 外的 <code>*.kiku.vip</code> 访问到正常的 HTTPS 服务，如果通过 HTTP 协议访问则强制跳转到 HTTPS。服务端除了 80 和 443 端口，其余端口关闭。</p><p>![image-20211017193845759](trojan 和 Nginx 共用 443 端口 images/image-20211017193845759.png)</p><p>具体的配置步骤：</p><ol><li><p>为 Nginx 设置 SNI 识别转发，如果没有安装过 Nginx，可以直接在宝塔面板的应用商店搜索 Nginx 安装即可。如果是通过宝塔安装的 Nginx，配置文件路径在：<code>/www/server/nginx/conf/nginx.conf</code>。<br>  在配置文件的 events 和 http 模块之间添加下面的内容。</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 流量转发核心配置</span><br><span class="hljs-section">stream</span> &#123;<br>    <span class="hljs-comment"># 这里就是 SNI 识别，将域名映射成一个配置名</span><br>    <span class="hljs-attribute">map</span> $ssl_preread_server_name $backend_name &#123;<br>        *.kiku.vip web;<br>        free.kiku.vip trojan;<br>        <span class="hljs-comment"># 域名都不匹配情况下的默认值</span><br>        <span class="hljs-attribute">default</span> web;<br>    &#125;<br><br>    <span class="hljs-comment"># web，配置转发详情</span><br>    <span class="hljs-attribute">upstream</span> web &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:4431</span>;<br>    &#125;<br>    <span class="hljs-comment"># trojan，配置转发详情</span><br>    <span class="hljs-attribute">upstream</span> trojan &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:4432</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># 监听 443 并开启 ssl_preread</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> reuseport;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> reuseport;<br>        <span class="hljs-attribute">proxy_pass</span>  $backend_name;<br>        <span class="hljs-attribute">ssl_preread</span> <span class="hljs-literal">on</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  也可以直接在宝塔面板 Nginx 管理中直接修改配置。</p><p>  ![image-20211017175843811](trojan 和 Nginx 共用 443 端口 images/image-20211017175843811.png)</p></li><li><p>修改 trojan 的监听地址和端口号以及如果识别为非 trojan 流量的回落端口号，trojan配置文件路径为 <code>/usr/local/etc/trojan/config.json</code> 。<br>  下面是配置文件的关键内容：</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;run_type&quot;</span>: <span class="hljs-string">&quot;server&quot;</span>,<br>    <span class="hljs-attr">&quot;local_addr&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;local_port&quot;</span>: <span class="hljs-number">4432</span>,<br>    <span class="hljs-attr">&quot;remote_addr&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;remote_port&quot;</span>: <span class="hljs-number">82</span>,<br><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改 <code>free.kiku.vip</code> 的站点的 Nginx 配置文件，文件路径为 <code>/www/server/panel/vhost/nginx/free.kiku.vip.conf</code>。<br>  下面是配置文件的完整内容：</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server<br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">127.0.0.1:82</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><br>    <span class="hljs-attribute">server_name</span> free.kiku.vip;<br>    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;<br>    <span class="hljs-attribute">root</span> /www/wwwroot/free.kiku.vip;<br><br>    <span class="hljs-comment"># 80 端口的访问强制跳转到 https 443</span><br>    <span class="hljs-attribute">if</span> ($server_port =  <span class="hljs-number">80</span>)&#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># 后台管理页面,通过 free.kiku.vip/admin 访问</span><br>    <span class="hljs-attribute">location</span> /admin &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   http://localhost:81/;<br>    &#125;<br><br>    <span class="hljs-comment"># 由于 trojan web 前端的部分资源是写在二进制中的，这些资源的访问路径固定</span><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~* ^/(static|common|auth|trojan)/</span> &#123;<br>        <span class="hljs-attribute">proxy_pass</span>  http://localhost:81;<br>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Upgrade $http_upgrade;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;Upgrade&quot;</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Host $host;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>  也可以选择直接在宝塔面板中修改站点的配置文件。</p><p>  ![image-20211017175540571](trojan 和 Nginx 共用 443 端口 images/image-20211017175540571.png)</p></li><li><p>修改 <code>kiku.vip</code> 的站点的 Nginx 配置文件，文件路径为 <code>/www/server/panel/vhost/nginx/kiku.vip.conf</code>。<br>  下面是配置文件的关键内容：</p>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server<br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">4431</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> kiku.vip;<br>    <br>    <span class="hljs-comment"># http 强制跳转到 https</span><br>    <span class="hljs-attribute">if</span> ($server_port !<span class="hljs-regexp">~ 443)</span>&#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改 trojan web 管理面板的监听端口号为 81，trojan web 的配置文件路径为 <code>/etc/systemd/system/trojan-web.service</code> 。<br>  下面是配置文件的完整内容，和原版配置区别在于第 9 行结尾使用 <code>-p</code> 指定了端口号。</p>  <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs txt">[Unit]<br>Description=trojan-web<br>Documentation=https://github.com/Jrohy/trojan<br>After=network.target network-online.target nss-lookup.target mysql.service mariadb.service mysqld.service docker.service<br><br>[Service]<br>Type=simple<br>StandardError=journal<br>ExecStart=/usr/local/bin/trojan web -p 81<br>ExecReload=/bin/kill -HUP \$MAINPID<br>Restart=on-failure<br>RestartSec=3s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure></li><li><p>配置完毕后重启 Nginx 和 trojan，让配置生效。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">service nginx restart<br>trojan restart<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>  <a href="https://trojan-gfw.github.io/trojan/">trojan 官方文档</a></li><li>  <a href="https://github.com/Jrohy/trojan/wiki">trojan 多用户管理部署程序 Wiki</a></li><li>  <a href="https://www.chengxiaobai.com/trouble-maker/trojan-shared-443-port-scheme">Trojan 共用 443 端口方案</a></li><li>  <a href="https://www.v2rayssr.com/trojanwordpress.html">Trojan+Nginx+WordPress个人博客，共用443端口！所有访问全部开启HTTPS，Trojan终极伪装！</a></li><li>  <a href="https://github.com/jinwyp/one_click_script#%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95-advanced-usage-%E4%B8%8E%E7%8E%B0%E6%9C%89%E7%BD%91%E7%AB%99%E5%85%B1%E5%AD%98">一键安装 trojan v2ray xray. Install v2ray / xray (VLESS) and trojan (trojan-go) script</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>trojan</tag>
      
      <tag>HTTP</tag>
      
      <tag>HTTPS</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS 初体验（三）在 VPS 上快速搭建 trojan 服务</title>
    <link href="/2021/10/16/%E5%9C%A8%20VPS%20%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%20trojan%20%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/10/16/%E5%9C%A8%20VPS%20%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%20trojan%20%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装前需要准备好一个域名已经解析到 VPS 的 IP 地址，二级域名三级域名都可以。</p><p>运行下面的一键安装脚本（需要切换到 root 用户）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">安装/更新</span><br>source &lt;(curl -sL https://git.io/trojan-install)<br><br><span class="hljs-meta">#</span><span class="bash">卸载</span><br>source &lt;(curl -sL https://git.io/trojan-install) --remove<br></code></pre></td></tr></table></figure><p>因为 trojan 协议中用到了 TLS 加密，需要申请证书。</p><p>![image-20211016150810283](在 VPS 上快速搭建 trojan 服务 images/image-20211016150810283.png)</p><p>输入 <code>1</code> 回车，申请免费的 Let’s Encrypt 证书，时长为 3 个月，到期前会自动续签。</p><p>然后输入提前准备好的域名，这里以 free.kiku.vip 为例</p><p>接下来需要安装数据库，如果没有安装过 MySQL 就选择 1。 </p><p>接下来提示设置管理员密码，使用该密码以管理员登录 trojan web 管理后台，管理员用户名默认为 admin 且不可更改。</p><p>然后给 trojan 初始用户设置用户名和密码，生成的 trojan 分享链接有关，也可以使用该初始用户登录 trojan web 管理后台查看自己的流量使用情况。</p><p>安装完毕后 trojan 会自动启动，在 Shell 中输入 <code>trojan</code> 可以对 trojan 进行一些管理设置。输入 <code>5</code> 可以得到 trojan 的分享链接，和之前设置初始的用户相对应。不输入任何数字直接回车可以退出管理程序，回到 Shell 环境。</p><p>![image-20211016232340427](在 VPS 上快速搭建 trojan 服务 images/image-20211016232340427.png)</p><p>浏览器访问之前输入的域名 <a href="https://free.kiku.vip/">https://free.kiku.vip</a> 访问 trojan web 管理面板，通过管理员帐号和用户都能登录。</p><p>管理员可以在 Web 界面中查看 trojan 的运行统计数据，对 trojan 用户进行管理。普通用户只能查看到自己的流量统计。</p><p>![image-20211017130244204](在 VPS 上快速搭建 trojan 服务 images/image-20211017130244204.png)</p><p>在管理界面的用户管理栏也能得到用户对应的 trojan 分享链接。</p><p>![image-20211017130719579](在 VPS 上快速搭建 trojan 服务 images/image-20211017130719579.png)</p><p>至此服务端已经搭建完毕，接下来是客户端配置。</p><p>在安卓手机可以使用 trojan 协议专用的客户端 <a href="https://github.com/trojan-gfw/igniter">Igniter</a> 来进行代理。只需要点击右上角粘贴上面得到的分享连接即可。</p><p>在 PC 中除了要下载客户端外还要为浏览器或者应用设置代理。</p><p>PC 上推荐使用 v2rayN 客户端，支持协议众多，最新的 v2rayN 已经支持 trojan 协议。<a href="https://github.com/2dust/v2rayN/releases/download/4.20/v2rayN.zip">下载 v2rayN 客户端</a>并运行，复制上面的分享链接，在 v2rayN 中选择从剪贴板导入服务器。选择刚才添加的 trojan 服务器然后回车，列表前面有 √ 的服务器代表当前连接使用的服务器。</p><p>![image-20211017132241969](在 VPS 上快速搭建 trojan 服务 images/image-20211017132241969.png)</p><p>服务器添加成功后，有下面两种方式使用代理上网：</p><ol><li><p>右键任务栏的 v2rayN 图标，选择自动配置系统代理。<br>  ![image-20211016233558949](在 VPS 上快速搭建 trojan 服务 images/image-20211016233558949.png)<br>  设置成功后代理服务器会自动被添加到 Internet 选项中。系统代理对所有浏览器以及部分自动使用系统代理的桌面应用生效，这些生效的应用的所有流量都会走代理。<br>  ![image-20211016233811251](在 VPS 上快速搭建 trojan 服务 images/image-20211016233811251.png)</p></li><li><p>下载 <a href="https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx">SwitchyOmega</a> 插件拖动到浏览器中安装，或者直接从 <a href="https://chrome.google.com/webstore/detail/padekgcemlokbadohgkifijomclgjgif">Chrome 应用商店</a>安装。</p><p>  新建情景模式，选择代理服务器模式。</p><p>  ![image-20211017002821872](在 VPS 上快速搭建 trojan 服务 images/image-20211017002821872.png)</p><p>  填写的代理协议和端口要和 v2rayN 主界面最下面下面状态栏的本地代理服务器地址和端口匹配。</p><p>  ![image-20211017132040245](在 VPS 上快速搭建 trojan 服务 images/image-20211017132040245.png)</p><p>  新建情景模式，选择自动切换模式，参考下图设置，规则列表的地址是 <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>。</p><p>  ![image-20211017003300414](在 VPS 上快速搭建 trojan 服务 images/image-20211017003300414.png)</p><p>  设置成功后将模式切换为 auto switch 模式，这样就会自动分流，访问国内网站的时候不走代理，访问谷歌等科学网站就会自动使用代理。也可以在某些网站添加新的切换规则或者临时使用代理，相比第 1 中方法更加灵活方便，因此更加推荐使用第 2 中方法。</p><p>  ![image-20211017125821159](在 VPS 上快速搭建 trojan 服务 images/image-20211017125821159.png)</p><p>  使用第 2 种方法建议右键任务栏的 v2rayN 图标，清除掉系统代理，这样只有使用 <a href="https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx">SwitchyOmega</a> 插件的浏览器才通过代理上网，避免对其他的应用的上网方式产生影响。如果某个应用需要使用代理，需要手动在应用设置找到代理设置填写代理协议和端口。以 Telegram 桌面应用为例：</p><p>  ![image-20211017132815559](在 VPS 上快速搭建 trojan 服务 images/image-20211017132815559.png)</p></li></ol><p>代理设置成功后在浏览器中使用 SpeedTest 测试代理速度，本地使用的是电信 50 M 校园网，可以跑满 VPS  30 Mbps 的带宽。</p><p>长沙联通节点：</p><p>![image-20211016154612731](在 VPS 上快速搭建 trojan 服务 images/image-20211016154612731.png)</p><p>黄冈电信节点：</p><p>![image-20211016230623209](在 VPS 上快速搭建 trojan 服务 images/image-20211016230623209.png)</p><p>香港节点：</p><p>![image-20211016153727954](在 VPS 上快速搭建 trojan 服务 images/image-20211016153727954.png)</p><p>下午 4 点 YouTube 连接情况：</p><p>![image-20211016155320235](在 VPS 上快速搭建 trojan 服务 images/image-20211016155320235.png)</p><p>晚上 11 点高峰期 YouTube 连接情况：</p><p>![1c2g50GB youtubetest](在 VPS 上快速搭建 trojan 服务 images/1c2g50GB youtubetest.png)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>  <a href="https://trojan-gfw.github.io/trojan/">trojan 官方文档</a></li><li>  <a href="https://github.com/Jrohy/trojan">trojan 多用户管理部署程序</a></li><li>  <a href="https://trojan-tutor.github.io/2019/04/10/p41.html">自建梯子教程 –Trojan版本</a></li><li>  <a href="https://github.com/V2RaySSR/Trojan_panel_web">一键更改 Trojan-Panel 面板端口并设置伪装站点</a></li><li>  <a href="https://breakthewa11.com/archives/trojan-%E4%BB%8E%E6%9C%AA%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95.html">Trojan，从未如此简单！</a></li><li>  <a href="https://www.v2rayssr.com/trojan-set.html">Trojan史上最全面的脚本！Trojan所有脚本集合！Trojan面板，单Trojan服务！</a></li><li>  <a href="https://ssr.tools/150">强大代理扩展插件SwitchyOmega使用教程 火狐/Chrome适用</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>VPS</tag>
      
      <tag>trojan</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS 初体验（二）使用 SSH 连接远程主机</title>
    <link href="/2021/10/14/%E4%BD%BF%E7%94%A8%20SSH%20%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/"/>
    <url>/2021/10/14/%E4%BD%BF%E7%94%A8%20SSH%20%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="发起连接"><a href="#发起连接" class="headerlink" title="发起连接"></a>发起连接</h2><p>Linux 发行版  和最新的 Windows 10 都自带了 OpenSSH 客户端，以 Windows 10为例，OpenSSH 客户端程序位于<code>C:\Windows\System32\OpenSSH\ssh.exe</code> 这个路径下，该路径已经被添加到系统环境变量 PATH 中，因此在终端中可以直接使用 <code>ssh</code> 命令来运行 SSH 客户端。在 <code>ssh</code> 命令后面接 <code>-V</code> 参数来查看 SSH 客户端版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -V<br></code></pre></td></tr></table></figure><p>SSH 客户端最常用的功能就是用来登录远程的服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh hostname<br></code></pre></td></tr></table></figure><p><code>hostname</code> 用来指定主机名，可以是域名、主机的 IP 地址、也可以是配置文件中的主机别名。默认使用当前客户端的用户名（也就是当前 Windows 所使用的的用户名）去登录远程主机。</p><p>可以在主机名前面用指定要登录的用户名，用 <code>@</code> 符号分隔。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh username@hostname<br></code></pre></td></tr></table></figure><p>也可以使用 <code>-l</code> 参数来指定要登录的用户名，和上面等效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh hostname -l username <br></code></pre></td></tr></table></figure><p>SSH 客户端默认连接服务器的 22 端口（SSH 服务端程序的默认监听端口），<code>-p</code> 参数可以指定其他端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh hostname -p 2222<br></code></pre></td></tr></table></figure><p>当客户端向服务端发起 SSH 连接请求时，SSH 服务端会将 <code>/etc/ssh</code> 目录下的 Host Key 公钥发回客户端，用来认证服务端的身份信息。</p><p>如果用户是第一次连接到该主机，SSH 客户端会提示用户确认服务端的公钥指纹。</p><p>如果选择信任该公钥，会将主机名和对应的公钥都储存在本机的 <code>~/.ssh/known_hosts</code> 文件中。以后再连接该主机时，如果主机发回的公钥和文件中的不符，则提示可能遭受中间人攻击并断开连接（HTTPS 用 CA 证书中心解决了该问题）。</p><p>如果确认是远程主机因为某些原因，例如重装系统或者重装 SSH 服务而重新生成了 Host Key公钥，那就需要在本地主机上使用以下命令将原来的公钥信息删除，或者手动打开 <code>~/.ssh/known_hosts</code> 文件删除对应的项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -R hostname # hostname 是发生公钥变更的主机名。<br></code></pre></td></tr></table></figure><p>删除了原来的公钥信息后，重新执行 ssh 命令连接远程服务器，重新确认服务端的公钥指纹，就可以发起连接请求了。</p><p>发起连接请求后 SSH 客户端会和服务端是进行版本协商、算法协商、秘钥交换，其中又用到了对称加密、非对称加密和密钥交换的各种算法（思路有和 HTTPS 中的 SSL/TLS 协议类似的地方，都是用非对称加密来交换对称秘钥，真正的消息内容都是使用的都是基于对称加密的的临时回话密钥（Session Key）进行加密，如果全程都使用非对称加密效率太低）。只需要知道 SSH 连接成功后建立了安全通道，具体的连接过程在此不深究。</p><p>客户端就与服务器建立连接 SSH 连接成功后，ssh 就会要求用户输入所要登录账户的密码，输入用户密码验证正确以后，就可以得到远程服务器的 Shell 环境了。</p><h2 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h2><h3 id="原理步骤"><a href="#原理步骤" class="headerlink" title="原理步骤"></a>原理步骤</h3><p>公钥免密登录步骤是：</p><ol><li>  用户根据非对称加密算法，生成一对密钥对。</li><li>  提前将密钥对中的公钥放置在远程主机用户目录下的 <code>~/.ssh/authorized_keys</code> 文件中。</li><li>   SSH 客户端指定某用户发起登录请求。</li><li>  SSH 服务端收到该用户的登录请求，SSH 服务端生成一个随机数，使用指定用户的用户目录下的 <code>~/.ssh/authorized_keys</code> 文件中的公钥列表中一个公钥加密，将加密后的数据给客户端。</li><li>  客户端使用密钥对中的私钥对这段随机数解密，解密结果和 Session ID 使用 MD5 算法生成摘要发回给服务端。如果私钥解密的数据发回服务器的时候如果被中间人劫持因为 Session  ID 也可以</li><li>  SSH 服务端用之前生成的随机数同样加上 Session ID 计算 MD5 hash 值，如果和客户端发过来的摘要匹配成功，就说明请求者拥有公钥所对应的私钥，即可以以该用户登录，不再需要输入密码。如果不匹配则回到第 4 步中使用公钥文件中的剩余公钥重复这个过程。如果所有的公钥都失败，则说明公钥登录失败，会提示用户输入密码登录。</li><li>  SSH 服务端遍历登录请求中指定用户的用户目录下的 <code>~/.ssh/authorized_keys</code> 文件中的公钥来解密，如果有一条公钥的解密结果和服务端之前发出的数据一致，如果该文件中的所有公钥的解密结果都匹配不上则显示输入密码登录。</li></ol><p>（其实还有 Session ID 等其他信息）数字签名，然后发回给服务端。</p><p>关于第 4 步中发送的随机数到底是直接发送还是使用 <code>authorized_keys</code> 中的公钥将加密后再发送的有不少的争议。</p><p>阮一峰的文章说的直接发送，但是要在第 5 步对响应给服务端的数据进行数字签名，如果第 5 步服务端使用公钥解签得到的摘要和原本的摘要一致也能证明认证用户的身份。</p><blockquote><p>  所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。——阮一峰：SSH原理与运用（一）：远程登录</p></blockquote><p>个人觉得阮提出的方法效率会更高，因为 <code>~/.ssh/authorized_keys</code> 文件中可以存放多个公钥，每一行都是一个公钥，服务端并不知道应该用哪个公钥来加密随机数，最差结果就是所有公钥都要按照上面的流程尝试一边，效率显然不如直接发送然后在服务端遍历公钥列表来解密私钥签名信息对比效率高。并且哪怕是随机数被中间人偷听了也无所谓，中间人没有真正的私钥能对随机数据进行正确签名的。</p><p>具体是哪一种也没去看底层代码验证过，无论是公钥加密，私钥解密，还是私钥签名，公钥解签，都能证明你是私钥的拥有者即可。</p><p>虽然个人很信任阮大，但是因为持后一种说法人太多，并且差了不少英文文章都是这样说，还是采纳了后一种说法。</p><p><strong>注意：很多人的文章说用户在发起登录请求会把公钥发送给服务端，这样服务端就知道用哪个公钥加密了，但是经过实验在本地主机删除了公钥文件也可以成功登录，说明并不存在发送公钥的行为。</strong></p><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><p>首先要使用 <code>ssh-keygen</code> 命令，生成一对密钥对。<code>-t</code> 是用来指定非对称加密使用的算法，可选 dsa 或者 rsa，默认值是 rsa。<code>-b</code> 是用来指定秘钥的二进制位数，<code>-b </code>至少应该是 <code>1024</code>，更安全一些可以设为 <code>2048</code> 或者更高。<code>-b</code> 至少应该是 <code>1024</code>，更安全一些可以设为 <code>2048</code> 或者更高。<code>-C</code> 参数可以为密钥文件指定新的注释，建议的格式为 <code>username@hostname</code>。<code>-f</code>参数指定生成的秘钥文件路径和名称。这些参数包括注释都是可选的，如果省略就使用默认值。</p><p><strong>注意：如果之前使用过 Github 的 SSH 免密登录功能，该目录下会有生成过的秘钥对，可以直接使用这套秘钥对来进行免密登录。当然也可以再创建新的密钥对，但是注意用 <code>-f</code> 参数指定秘钥文件路径和名称，不要把原来的秘钥文件覆盖了，否则 GitHub 的免密登录会失败。</strong></p><p>输入下面的命令就会在 SSH 的配置目录 <code>~/.ssh</code> 下生成名为 <code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）秘钥对文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 4096 -C &quot;root@kiku.vip&quot;<br></code></pre></td></tr></table></figure><p>在生成秘钥的过程中会询问是否要为私钥设定密码（passphrase，为了和用户密码 password 区别），如果设定密码则在使用私钥前还要输入密码对私钥解锁，虽然和密码口令登录一样时要输入密码，但是更加安全。如果为了方便，不想设定密码，直接输入两次回车就好。</p><h3 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h3><p>免密登录能成功的前提是用户已经将提前将秘钥对中的公钥添加到远程主机的 <code>~/.ssh/authorized_keys</code> 文件中，因此生成密钥对以后，还得把公钥必须上传到服务器，才能使用公钥登录。</p><p>要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。</p><p>下面提供三种上传公钥到远程主机上的方法：</p><ol><li><p>如果购买的是大厂云服务器，可以直接在控制台中上传公钥。以腾讯轻量应用服务器为例：<br>  首先要在控制台中创建秘钥：<br>  ![image-20211014162335502](使用 SSH 连接远程主机 images/image-20211014162335502.png)<br>  ![image-20211014162545603](使用 SSH 连接远程主机 images/image-20211014162545603.png)<br>  然后将秘钥绑定到我们远程主机上。<br>  <strong>注意：腾讯云控制台上传的公钥只能绑定在 root 用户下，并且绑定后将不能再通过密码方式 SSH 登录。</strong><br>  ![image-20211015175759714](使用 SSH 连接远程主机 images/image-20211015175759714.png)</p></li><li><p>手动将本地的公钥文件写入到远程主机上。<br>  在远程主机执行下面的命令。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/.ssh  <br>chmod 700 ~/.ssh<br>vi ~/.ssh/authorized_keys<br>chmod 600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>  第 1、2 行是在用户的主目录下创建 <code>.ssh</code> 的目录并设置权限为只有该用户可以访问，第 3 行打开信任的公钥文件，将公钥粘贴进去然后保存退出，第 4 行更改公钥文件的权限只有所有者有读写权限。如果权限设置不对，SSH 服务器可能会拒绝读取该文件。</p><p>  <strong>注意：该文件中可以存放多个公钥，每一行都是一个公钥，为了不影响其他客户端的登录应该把公钥追加到末尾，而不是直接覆盖。并且最后在后面添加一个换行，防止下次添加的公钥接在了同一行后面。</strong></p><p>  也可以使用在本地主机运行下面的命令将公钥上传到远程主机，其中<code>~/.ssh/id_rsa.pub</code> 替换成本地公钥存放的位置， <code>username@hostname </code> 要替换成你所要登录的用户名和主机名。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub | ssh user@host &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;<br></code></pre></td></tr></table></figure><p>  但是还是要登录远程主机，执行下面的命令修改目录和文件的权限才能成功。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 700 ~/.ssh<br>chmod 600 ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>ssh-copy-id</code> 命令：自动上传公钥，Linux 上自带的 OpenSSH 自带一个 <code>ssh-copy-id</code> 命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。<br>  用户在本地 Linux 计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。 <code>-i</code> 参数指定上传的公钥文件。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh-copy-id -i key_file user@host</span><br></code></pre></td></tr></table></figure><p>  <strong>注意：Windows 10 的自带的 OpenSSH 并没有 <code>ssh-copy-id</code> 工具，因此无法使用该命令，网上有一些第三方对的实现，可用性没有测试过，建议 Windows 使用前面两种方法，</strong></p></li></ol><p>上传成功后使用下面命令就可以顺利免密登录，不用再输入密码。可以使用 <code>-i</code> 参数指定使用的私钥文件，默认使用的私钥文件为 <code>~/.ssh/id_rsa</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh admin@kiku.vip -p 2222 -i ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SSH 客户端的相关配置文件在本地主机的 <code>~/.ssh</code> 目录下，使用 <code>ssh-keygen</code> 命令生成的密钥对，还有信任主机列表 <code>known_hosts</code> 文件都在该目录下。</p><p>而 <code>~/.ssh/config</code> 文件是 SSH 客户端配置文件，如果该目录下不存在该文件，可以手动创建一个名为 <code>config</code> 无后缀格式的纯文本文件。</p><p>使用 SSH 客户端配置文件，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子，例子里面的缩进格式并不是必需的，只是为了视觉上区分不同主机的设置。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span> *<br>    <span class="hljs-attribute">Port</span> <span class="hljs-number">2222</span><br>    <span class="hljs-comment"># 断开时重试连接的次数</span><br>    <span class="hljs-attribute">ServerAliveCountMax</span> <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 每隔 60 秒自动发送一个 keepalive 信号以保持连接</span><br>    <span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">60</span><br>     <br><span class="hljs-attribute">Host</span> bloghost<br>    <span class="hljs-attribute">HostName</span> kiku.vip<br>    <span class="hljs-attribute">User</span> root<br>    <span class="hljs-attribute">Port</span> <span class="hljs-number">2222</span><br>    <span class="hljs-attribute">IdentityFile</span> ~/.ssh/bloghost<br></code></pre></td></tr></table></figure><p><code>Host *</code>表示对所有主机生效，后面的 <code>Port 2222 </code> 表示以后连接所有服务端都使用 2222 端口而不是默认的 22 端口，这样就不用在每次登录时都使用 <code>-p</code> 特别指定端口了。</p><p>SSH 客户端连接服务端长时间不操作会终止回话断开连接，下次连接又要发起登录请求，后面的两行可以保持长时间连接。</p><p><code>Host bloghost</code> 表示新的一项主机设置，真正连接主机名由下面的 <code>HostName</code> 决定，<code>bloghost</code> 可以理解为 <code>kiku.vip</code> 这个主机名的别名，如果使用 <code>ssh</code> 连接的是配置文件中的别名，就会套用后面指定的参数。例如 <code>ssh bloghost</code> 就相当于下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh kiku@kiku.vip -p 2222 -i ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p>  <a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">阮一峰：SSH原理与运用（一）：远程登录</a></p></li><li><p>  <a href="https://wangdoc.com/ssh/index.html">网道：SSH 教程</a></p></li><li><p>  <a href="https://www.bilibili.com/video/BV1Tf4y1x7vo">B 站：2.1.2 SSH工作原理</a></p></li><li><p>  <a href="https://ccstudio.org/linux/part1/remote.html#41-ssh%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">ssh基础使用</a></p></li><li><p>  <a href="https://www.jianshu.com/p/33461b619d53">图解 SSH 原理</a></p></li><li><p>  <a href="https://zhuanlan.zhihu.com/p/108161141">每天都在用 SSH，你知道 SSH 的原理吗？</a></p></li><li><p>  <a href="https://datatracker.ietf.org/doc/html/rfc4252#section-7">rfc4252：Public Key Authentication Method: “publickey”</a></p></li><li><p>  <a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html#chal">How Key Challenges Work</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH</tag>
      
      <tag>Linux</tag>
      
      <tag>安全</tag>
      
      <tag>VPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS 初体验（一）基础配置</title>
    <link href="/2021/10/13/VPS%20%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/10/13/VPS%20%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>去年刚开始捣鼓静态博客的时候，就有买一台云服务器来托管博客的想法，但需求又不是那么强烈。GitHub Pages 虽然在国内访问确实龟速，还时不时会挂掉。但是一想到又要额外花一笔钱和精力在上面又有点觉得不值，反正博客只是自己个人看看，访问速度慢点就慢点吧，实在不行再去套一层 CDN 试试，再加上后来有段时间博客没怎么打理，买云服务器的想法也就不了了之了。</p><p>最近又萌生了买云服务器的想法。</p><p>一是因为要准备找工作，简历上要给出项目的在线预览地址，这时再用 GitHub Pages 来展示就不太好了，说不定面试官预览的时候半天刷新不出来甚至就挂掉了，毕竟 GitHub 的网络不确定性太大了，与其挑战面试官的耐心还是多花几个钱提升下访问速度。</p><p>二是最近科学上网频繁，免费的代理工具虽白嫖很爽，但体验普遍都不怎么样，速度差且不稳定，有时候加载个搜索结果都要好几秒，看高清视频就更不用想了，不停的卡顿浪费时间和心情。再者流量要经过别人服务器，存在一定安全隐患，用起来总归是有点不安心。</p><p><strong>注意：代理提供方完全有能力收集用户的全部上网信息（例如访问者的 IP，目标的的域名或者 IP，访问时间等），甚至使用深度包检测提取 HTTP 明文流量中的户名和密码，然后将数据专卖给黑产。这并不是杞人忧天，此前已有先例。不要以为自己作为普通人的隐私数据没有什么价值不会被盯上。举个简单的例子，比如你通过代理工具上网注册了某平台的足彩网站，一段时间后就可能别的平台的博彩广告找到你，到底是代理提供方还是注册平台贩卖了你的电话不得而知，这个例子只是为了说明个人的隐私完全是有利可图的。总之就是时刻注意隐私泄漏问题，尽可能不要在不可信的信道传输自己的敏感信息。特别是那些打着永久免费旗号软件中还没有广告插入的的代理提供方需要格外注意。天下没有免费的午餐，有时候免费的反而是最贵的。即使使用的是付费服务就并不代表就没有风险，特别是一些可能随时跑路小机场，本来就和灰黑产走的很近，滥权也不奇怪。使用国内外知名大厂的  VPS 自建代理服务器可以把泄露风险降到最低。这些大厂和国内三大运营商比某些无良机场主值得信赖得多，只要不滥用，一般不会有被请喝茶的风险</strong></p><p>三是除了搭博客外还有其他可能用得到服务器的地方，例如后端接口项目，内网穿透，搭建图床。</p><p>尽管入坑的理由又更加充足，但还是纠结了两天。如果决定入坑，不只是下单付款那么简单，有太多知识要学习了，肯定要花不少时间，准备秋招的时间就更少了。</p><p>考虑再三，终于下定决心购买了年轻人的第一台 VPS，开启了 VPS 的折腾之路。</p><h2 id="购买-VPS"><a href="#购买-VPS" class="headerlink" title="购买 VPS"></a>购买 VPS</h2><p>关于 VPS 的选购其实个人不做任何产品推荐，因为我也才刚刚入坑，我真正上手测试过的 VPS 就两家，不像很多大佬对很多自己就有几十上百台 VPS 同时在线，对不同厂商的套餐类型线路都如数家珍。这里仅仅谈一谈自己选购的思路。</p><p>根据前面的提到我对 VPS 的几点需求（一句话说就是托管博客和前端项目以及搭建代理），列出了下面几条筛选条件：</p><ol><li>  服务器地点一定要是非大陆，一是备案麻烦，二是有爬墙需求。</li><li>  离大陆越近越好，最好直接接壤，延迟会低一点。结合上第 1 条其实可选择的地点范围就已经出来了：香港、韩国、日本、俄罗斯。不知为什么我对海底光缆充满了不信任，但其实只要线路优质，跨洋距离远也不是什么大问题，延迟高一点关系但只要不丢包体验一样也很好。</li><li>  对 CPU 性能，内存、硬盘无要求，性能再弱鸡跑个静态网页和代理服务器应该没什么问题。</li><li>  带宽能看流畅观看 1080P 视频就可以，10 Mbps 就满足了，再个人而言高带宽的意义不是很大。国内的服务器带宽贵的离谱，普遍都是 1M 2M 小水管，而国外的 VPS 带宽往往都很足，动辄上 G 的带宽（尽管是共享带宽），平常时间可以跑出几百兆的下载速度，但是毕竟国内总的出口带宽有限，一到晚上高峰期体验就会急剧下降，除非是选择像 CN2 GIA 那样的优质线路，注意优质线路的同时也意味着价格可能会成倍上涨。</li><li>  老牌厂商，不会有跑路和隐私泄漏风险。</li></ol><p>对比国内外知名厂商的一些产品套餐，结合群里大佬们给出的意见，最后选择腾讯轻量应用服务器香港节点 24 元每月的套餐：CPU - 1核，内存 - 1GB，系统盘 - SSD 25GB，流量包 - 1024 GB/月（峰值带宽 30 Mbps）。如果以后性能不够可以在原套餐上无缝升级，无需迁移备份。如果选择绑定代理的话实际到手价格还能更优惠一点。</p><p>腾讯云在国内的云厂商中还算比较良心了，虽然这款目前已经不走 CN2 GIA 线路了，但是线路质量也还算不错，几天轻度使用下来也没高峰期的也没感到什么卡顿。这款 24 元套餐性价比在国内厂商中算很高了，基本每天开售十几分钟就售罄了（腾讯轻量云是每天十点补货）。阿里云有款同配置同价格的套餐，传说腾讯轻量云的线路会好点。</p><p>云主机，云服务器，虚拟主机在大多数场景几个名词可以相互替换，不用严格去区分概念，都可以简单理解为一台带公网 IP 的 7 * 24 小时运行的计算机。但注意要和网页主机（Web Host）区分，网页主机实际上只是提供云空间来存储静态网页或者例如 WordPress 这种特定的动态网站，使用方向非常受限。VPS（Virtual Private Server）更喜欢用来称呼个人或着小企业用的小型云服务器，相比传统的云服务器，VPS 的硬件规模更小，价格也亲民许多，当然性能也会有很大差距。</p><p>以<a href="https://cloud.tencent.com/document/product/1207/49819">腾讯云</a>官方对这两种服务器的的为例：</p><blockquote><p>  对比 <a href="https://cloud.tencent.com/document/product/213/495">云服务器 CVM</a>，轻量应用服务器 TencentCloud Lighthouse 更聚焦于中小企业、开发者、云计算入门者、学生等用户群体。相比云服务器 CVM 更加简单易用，精简了云服务器 CVM 的高阶概念及功能，提供高带宽流量包并以高性价比的套餐形式整体售卖基础云资源，将热门开源软件融合打包实现一键构建应用，更适合于支撑中小型网站、Web 应用、博客、论坛、小程序/小游戏、电商、云盘/图床、云端开发测试和学习环境等轻量级、低负载且访问量适中的应用场景。</p></blockquote><p>国外的有不少专门面对个人 VPS 厂商，而在国内的云服务商中这类产品往往不直接叫 VPS，比如阿里云、腾讯云产品中叫做轻量应用服务器，有的厂商叫经典云服务器（相对的是弹性云服务器）。在购买国内厂商的 VPS 一定要主要和传统的云服务器的区别开，传统的云服务器往往月费价格价格都成百上千，而 VPS 则会便宜不少。</p><h2 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h2><p>购买完主机后第一步就应该对主机进行一些基础的测试，第一时间发现可能的问题，比如 IP 被墙无法连接硬件性能和购买页面的宣传指标相差太多。发现异常一定要联系客服退款重开或者更换其他产品，不要等到最后环境搭了半天白忙活一场。</p><ol><li><p>网络连通性测试：首先在本地 ping 远程的主机看是否能够 ping 通，如果不能 ping 通说明该台 VPS 的 IP 地址已经被墙了，就需要退款重开一台新的机器，或者部分云厂商支持直接更换 IP。一般大厂的 VPS 不会新开到 IP 被墙的机子，但是国外的 VPS 厂商 IP 池中有不少都已经被国人给玩坏了，运气差一点就很容易中奖。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping 43.135.29.251<br></code></pre></td></tr></table></figure></li><li><p>硬件性能测试：在服务器控制台直接登录到远程主机，然后运行以下脚本查看 VPS 的 Linux 系统信息，还可以查看服务器配置信息，测试网络带宽及硬盘读写速率你可以</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -qO- bench.sh | bash<br></code></pre></td></tr></table></figure><p>  这是在腾讯轻量应用服务器香港节点 24 元每月套餐得到的结果。可以看到上传速度没有虚标，30 Mbps 的带宽可以跑满，硬盘连续读写 100 多 MB 每秒，虽然购买页面写着是 SSD 硬盘，但是实际也就是机械硬盘的水平，不过也比一些读写个位数的石头硬盘强太多了，考虑到价格完全可以接受。<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955475.png" alt="image-20211015111557658"></p><p>  下面是腾讯轻量应用服务器香港节点 34 元每月套餐的测试结果，可以做个对比。<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955476.png" alt="1c2g50GB bench"></p></li><li><p>路由测试：很多人最关心 VPS 的去程回程路由走的什么线路，线路确实可以一定程度上决定网络质量，但是和自己的的网络供应商、物理位置也有着很大的关系，可能同一台机子不同人的访问速度截然不同。路由线路只能做参考，自己平日特别是晚上网络高峰期的使用感受更能说明网络质量的好坏，没必要过分追捧 CN2 GIA 线路，当让如果有钱任性请无脑上 GIA。<br>  以下路由测试均是基本的网络环境（湖北武汉，电信校园网）。<br>  去程测试，在本机运行以下命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tracert 43.135.29.251<br></code></pre></td></tr></table></figure><p>  去程路由结果：<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955477.png" alt="image-20211015112415667"></p><p>  回程测试，在服务器控制台 WebShell 运行以下命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mtr 27.18.195.81 -r<br></code></pre></td></tr></table></figure><p>  上面的 27.18.195.81 地址是本人访问互联网的显示的公网 IP 地址，回程路由结果：<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955478.png" alt="image-20211015113516101"></p><p>  可以看到去程回程都走的是 AS4134，即电信传统的 163 骨干网，没有经过 CN 2 GIA 节点。目前腾讯轻量服务器香港地区的 VPS 据说只有少量机器仍然是 CN 2 GIA 路线了，询问客服得到的回答线路是随机的，猜测可能和开到的 VPS 的 IP 有关。</p><p>  如果关心多地的访问情况可以在 IPIP 上使用 <a href="https://tools.ipip.net/traceroute.php">TraceRoute 工具</a>查看不同地域节点去程线路，运行下面的网络回程测试脚本（需要 root 权限）查看不同地点的回程路线：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh|bash<br></code></pre></td></tr></table></figure><p>  多地回程路由结果：</p><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955479.png" alt="image-20211015152457648"></p></li></ol><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>如果想使用自己注册的域名来访问主机，需要先在 DNS 解析服务商添加解析记录。</p><p><strong>注意：这一步对连接 VPS 不是必须的，即使自己没有域名也可以通过 IP 地址来访问主机。</strong></p><p>此前我的个人域名是注册在 NameSilo 名下，NameSilo 的自带的解析服务要接近一个小时才在国内生效，并且域名管理页面实在是太卡了。而使用 DNSPod 在国内几分钟解析记录就更新生效了，后台管理界面和流畅度也比 NameSilo 好太多。于是决定将将 DNS 域名解析服务从 NameSilo 迁移到腾讯 DNSPod，具体迁移步骤参见腾讯的官方文档： <a href="https://cloud.tencent.com/document/product/302/5518#edit">其他注册商域名修改 DNS</a>。</p><p>迁移之后在 NameSilo 域名管理后台看到的效果：</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955480.png" alt="Image"></p><p><strong>注意：域名的管理权和解析权是独立的，可以仅仅把迁移解析权，管理权仍然在原来的注册商。</strong></p><p>进入腾讯 <a href="https://console.cloud.tencent.com/cns">DNS 解析 DNSPod 控制台</a>，添加域名，然后设置解析记录。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955481.png" alt="image-20211015100440630"></p><p>添加一条 @ 类型的解析记录，把自己的域名直接指向 VPS 的 IP 地址。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955483.png" alt="image-20211015115836550"></p><p>过一段时间后，使用 <code>nslookup</code> 命令来看解析记录是否生效。如果十分钟过去还没有生效，尝试使用 <code>ipconfig /flushdns</code> 命令刷新一下本地的 DNS 缓存或者重启路由器。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955484.png" alt="image-20211015115920642"></p><h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p>部分 VPS 厂商在新开通服务器时会为 root 用户自动生成了一串随机的密码，可以直接使用 root 用户登录。</p><p>而腾讯云中新开通的轻量应用服务器要先在控制台重置 root 用户的密码才能切换到 root 用户。重置密码需要在关机状态，可以先手动关机或者直接强制关机。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955485.png" alt="image-20211015102234813"></p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955486.png" alt="image-20211015102715107"></p><p>重置完密码就可以使用 SSH 客户端来登录 VPS 了，Windows 10 自带 SSH 客户端，直接在终端中输入以下命令即可向 VPS 发出登录请求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh root@kiku.vip<br></code></pre></td></tr></table></figure><p>在第一次连接陌生的 VPS 主机会发出确认提示，输入 yes 然后回车。接着输入自己刚才重置的 root 用户密码即可以 root 用户身份连接上 VPS。关于 SSH 的更多配置可以参考后面的安全设置这一节以及我的另一篇博客<a href="">使用 SSH 登录远程主机</a>。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955487.png" alt="image-20211015122821186"></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>下面中的操作都以 CentOS 7.6 为例，如果是 Debian 系列的 Linux 发行版，请将下面命令中的 <code>yum</code> 用 <code>apt-get</code> 替换。如果是较老版本的 CentOS 先安装 wget 工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install wget <br></code></pre></td></tr></table></figure><ol><li><p>更新系统和软件包。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br></code></pre></td></tr></table></figure><p>  新开的机器建第一步先将系统内核和软件包更新到最新，环境搭建好后不再轻易更新。在更新完毕清理安装包的时候，清理结束后可能会卡住不会自动退出，直接手动 <code>ctrl + c</code> 结束就好。</p></li><li><p>安装 BBRplus 加速。</p><blockquote><p>  BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。</p></blockquote><p>  简单理解就是开启 BBR 可以提高机器的网络速度，从 Linux 4.9 版开始，内核就自带了该功能（但是部分发行版需要手动启用 BBR 加速功能）。</p><p>  依次输入以下命令下载并运行一键安装BBR/暴力BBR/魔改BBR/BBRplus/锐速 (Lotserver)四合一的脚本。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;<br>chmod +x tcp.sh<br>./tcp.sh<br></code></pre></td></tr></table></figure><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955488.png" alt="image-20211015134335662"></p><p>  输入 <code>2</code> 回车，安装 BBRplus 内核。BBRplus 是在原版 BBR 基础上的改进版本，加速效果更好。据说 BBR 魔改版和锐速的加速效果更好，但可能存在兼容和稳定性问题，本人也没有具体在测试过。</p><p>  安装成功会提示是否现在重启机器。输入 <code>y</code> 确认现在重启。</p><p>  重启完毕后重新登录 VPS，输入以下命令再次运行该脚本，</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">./<span class="hljs-selector-tag">tcp</span><span class="hljs-selector-class">.sh</span><br></code></pre></td></tr></table></figure><p>  输入 <code>7</code> 回车，提示 BBRplus 启动成功！</p><p>  输入下面的命令查看 brr 内核模块。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsmod | grep bbr<br></code></pre></td></tr></table></figure><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955489.png" alt="image-20211015134842826"></p></li><li><p>安装宝塔 Linux 面板。</p><p>  如果对 Linux 系统不熟悉的，强烈建议装一个可视化图形化面板，大大降低了 Linux 系统的上手难度。无论是装一些常用的软件，修改服务配置，编辑配置文件，查看系统负载情况。都可以直接通过面板操作。当然，还是有些配置必须通过 SSH 登录服务器操作，因此熟悉下常用的 Linux 命令也是很有必要的。   </p><p>  安装宝塔需要确保当前是较为干净的操作系统，VPS 最好此前没有安装过 Apache / Nginx / php / MySQL 等软件，否则很可能产生冲突。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh    <br></code></pre></td></tr></table></figure><p>  安装成功后，末尾给出访问面板的入口地址以及初始的用户名和密码，这些都是随机生成的，也可以之后手动修改。如果忘记了初始的默认账户和密码可以使用下面命令查看。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bt default<br></code></pre></td></tr></table></figure><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955490.png" alt="image-20211015142221381"></p><p>  国内的大部分云产品都默认有安全组，在访问面板前需要去服务器控制台放行宝塔默认的 <code>8888</code> 端口，同样以腾讯云轻量应用服务器为例：</p><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955491.png" alt="image-20211015141122173"></p><p>  放行成功后就可以通过网址来默认入口地址访问宝塔面板了，输入初始的默认账户和密码，同意用户协议就进入了面板主界面。</p><p>  最新的宝塔面板强制用户绑定宝塔账户才能使用，如果不想绑定可以使用运行下面的命令绕过宝塔的登录要求。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;&#123;\&quot;uid\&quot;:1000,\&quot;username\&quot;:\&quot;admin\&quot;,\&quot;serverid\&quot;:1&#125;&quot; &gt; /www/server/panel/data/userInfo.json<br></code></pre></td></tr></table></figure><p>  <strong>注意：因为宝塔面板官方的限制方法也在不断的变更，可能有些绕过登录的方法已经失效，截止 2021.10 使用该方法有效。</strong></p><p>  在左侧的软件商店搜索下载宝塔跑分跑个分看一看。这是在腾讯轻量应用服务器香港节点 24 元每月套餐得到的跑分结果。</p><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955492.png" alt="image-20211015143825173"></p><p>  下面是腾讯轻量应用服务器香港节点 34 元每月套餐的跑分结果，可以做个对比。不过对比也就图一乐，分高也不能说明性能就一定更强，因为都是虚拟出来的资源，也和跑分时宿主服务器上别的虚拟服务器资源抢占情况有关。</p><p>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955493.png" alt="Image"></p></li></ol><h2 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h2><h3 id="更改-sshd-默认端口"><a href="#更改-sshd-默认端口" class="headerlink" title="更改 sshd 默认端口"></a>更改 sshd 默认端口</h3><ol><li><p>使用 nano 编辑器打开 SSH 服务端程序 sshd 的配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p> 对新手来说 nano 比 vi 编辑器更加友好，常用的操作快捷键都列在最下面，如果没有耐心学习 vi，nano 也是个不错的选择。</p></li><li><p>找到 <code>#Port 22</code> 这一行，将 <code>22</code> 修改成修改成你想替换的端口，建议把它改成一个大于<code>1024</code>小于<code>65535</code>的整数，但是注意不要和其他常用软件的默认端口冲突，例如 MySQL 服务的 <code>3306</code> 端口。<code>#</code> 开头的表示注释，有一些注释代表了 sshd 所采用的默认值。因此改完端口号后别忘了去掉注释符号 <code>#</code>，否则并不会真正生效。<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955494.png" alt="image-20211015145006778"></p></li><li><p>   <code>ctrl + o</code> 然后回车确认保存配置文件，<code>ctrl + x</code> 退出 nano 编辑器。</p></li><li><p>重启 SSH 服务端程序使端口生效。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service sshd restart<br></code></pre></td></tr></table></figure></li><li><p>和之前放行宝塔 8888 端口一样，在服务器的控制台防火墙放行 2222端口，除此之外还要在宝塔面板的安全选项卡中放行 2222 端口。因为安装了宝塔后相当于有两层防火墙，一层为腾讯服务器自带的，一层是宝塔中的安全控制。<br>  <img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955495.png" alt="image-20211015145909664"></p></li><li><p>在客户端打开一个新的 SSH 客户端来测试新端口能否连接成功。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh root@kiku.vip -p 2222<br></code></pre></td></tr></table></figure><p>  <strong>注意：不要直接在原来的终端窗口中测试，使用新端口登录测试成功，确保修改后的端口可用，再关闭原来的已经连接成功的 SSH 客户端，防止和服务器失联。</strong></p></li></ol><h3 id="创建非-root-用户"><a href="#创建非-root-用户" class="headerlink" title="创建非 root 用户"></a>创建非 root 用户</h3><p>直接使用 root 用户进行操作方便是方便，但是 root 用户的权限太大，说不定某些时候就误操作了。建议创建一个普通用户，需要使用 root 权限的再使用 <code>su root</code> 切换 root 用户或者使用 <code>sudo</code> 来赋予某些操作 root 权限。</p><p>下面的命令添加一个普通用户，名为 admin。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adduser admin<br></code></pre></td></tr></table></figure><p>给 admin 用户设置密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">passwd admin<br></code></pre></td></tr></table></figure><p>sudo 工具能够给 admin 的操作临时添加上 root 权限，较新 Linux 发行版已经集成了该工具可以直接使用，如果没有可以使用下面的命令安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install sudo<br></code></pre></td></tr></table></figure><p>输入下面的命令编辑 sudo 的配置文件，让 admin 用户也能拥有 root 权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">visudo<br></code></pre></td></tr></table></figure><p>在配置文件末尾添加 <code>vpsadmin ALL=(ALL:ALL) ALL</code> 或者 <code>vpsadmin ALL=(ALL) NOPASSWD: ALL</code> 然后保存退出，前者每次使用 <code>sudo</code> 需要输入 admin 的密码进行确认，后者不需要输入任何密码。选择哪种取决于你是想要更安全还是更方便。</p><h3 id="禁止-root-登录和密码登录"><a href="#禁止-root-登录和密码登录" class="headerlink" title="禁止 root 登录和密码登录"></a>禁止 root 登录和密码登录</h3><ol><li><p>使用 nano 编辑器打开 SSH 服务端程序 sshd 的配置文件。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>  找到 <code>#PermitRootLogin yes</code> 这一行，然后把它后面的设定值改为 <code>no</code> 并去掉 <code>#</code>，这将会禁止 root 用户通过 SSH 的方式登录。找到 <code>#PasswordAuthentication yes</code> 这一行，同样把它后面的设定值改为 <code>no</code>，并去掉 <code>#</code> 保存退出，将会禁止使用密码登录，只能使用公钥登录。请确保已经正确的配置了公钥，请参考<a href="">使用 SSH 客户端登录远程主机</a>。</p><p>  修改完保存文件退出。</p></li><li><p>重启 SSH 服务端程序使端口生效。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service sshd restart<br></code></pre></td></tr></table></figure></li><li><p>在客户端打开一个新的 SSH 客户端以 root 用户登录。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh root@kiku.vip -p 2222<br></code></pre></td></tr></table></figure><p>  仍会提示输入密码，但是即使密码输入正确也无法登录成功。</p></li><li><p>可以通过前面创建的 admin 用户登录，之后可以使用 <code>su root</code> 切换到 root 用户。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh admin@kiku.vip -p 2222<br></code></pre></td></tr></table></figure></li></ol><h3 id="更改宝塔的默认设置"><a href="#更改宝塔的默认设置" class="headerlink" title="更改宝塔的默认设置"></a>更改宝塔的默认设置</h3><p>修改宝塔面板的默认端口，也可以在该页面修改宝塔的入口地址和登录账号和密码。修改完端口后务必记得在服务器的控制台防火墙放行新的端口。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955496.png" alt="image-20211015173049867"></p><h2 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h2><p>如果以上都设置成功，建议在当前状态生成一份快照，备份 VPS 当前的状态，之后如果损坏了某些环境又修复不好，就可以直接回滚到快照，而不必重置系统再重新做一遍这些基本设置。</p><p>大多数厂商都在控制台中提供了快照功能，以腾讯云为例，每个 VPS 可以创建两个免费快照。</p><p><img src="https://kiku-blogpic.oss-cn-shenzhen.aliyuncs.com/img/202110191955497.png" alt="image-20211016125916092"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>  <a href="https://blog.laoda.de/archives/how-to-secure-a-linux-server#toc-head-7">保护好你的小鸡！保姆级服务器安全教程！</a></li><li>  <a href="https://blog.laoda.de/archives/vps-choose">VPS服务器选购不完全指南</a></li><li>  <a href="https://blog.laoda.de/archives/666clouds">新拿到手一台服务器，怎么样给它做个全方位的“体检”？</a></li><li>  <a href="https://www.gubo.org/hongkong-cn2-gia-vps/">香港CN2 VPS/香港CN2 GIA VPS及可靠商家介绍推荐</a></li><li>  <a href="https://www.itbulu.com/unbind-btaccount.html">解除宝塔面板绕过强制绑定官网账号几个有效方法</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>折腾日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>VPS</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
